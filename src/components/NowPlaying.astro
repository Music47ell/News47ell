<now-playing>
	<div data-card class="hidden overflow-hidden p-4 rounded-xl border border-yellow-500 bg-stone-900">
	<a data-url class="flex relative items-center gap-5">
		<div class="relative origin-center">
			<img class="block" data-image />
		</div>
		<div>
			<p data-title class="origin-left text-base font-semibold text-white md:text-xl"></p>
		</div>
	</a>
</div>
</now-playing>

<script is:inline async>
	 class NowPlaying extends HTMLElement {
    async connectedCallback() {
      const fetchNowPlaying = async () => {
        const res = await fetch('/api/now-playing');
        const data = await res.json();
        return data;
      };

      const updateUI = (data) => {
        const url = data.url || '';
        const title = data.title || '';
        const image = data.image || '';
        const isPlaying = data.isPlaying || false;

        const urlEl = this.querySelector('[data-url]');
        const titleEl = this.querySelector('[data-title]');
        const imageEl = this.querySelector('[data-image]');

        if (isPlaying) {
          this.querySelector('[data-card]').classList.remove('hidden');
        } else if (!isPlaying) {
          this.querySelector('[data-card]').classList.add('hidden');
        }

        urlEl.href = url;
        imageEl.src = image;
        imageEl.width = imageEl.height = 100;
        titleEl.textContent = imageEl.alt = imageEl.title = title;
      };

      const fetchDataAndUpdateUI = async () => {
        try {
          const data = await fetchNowPlaying();
          updateUI(data);
        } catch (error) {
          console.error('Error fetching now playing data:', error);
        }
      };

      // Fetch and update data every 1 minute (60000 milliseconds)
      const updateInterval = 60000;
      setInterval(fetchDataAndUpdateUI, updateInterval);

      // Initial fetch and update
      fetchDataAndUpdateUI();
    }
  }

  customElements.define('now-playing', NowPlaying);
</script>